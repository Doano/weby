stages:
  - build
  - precompile
  - deploy

variables:  # https://docs.gitlab.com/ee/ci/variables/
  DOCKER_TLS_CERTDIR: ""
  CI_PROJECT_ENV: ${CI_PROJECT_NAME}_${CI_COMMIT_BRANCH}
  CI_VERSION_ENV: "latest"
  CI_COMMIT_SHORT_SHA: $CI_COMMIT_SHORT_SHA
  RAILS_ENV: $RAILS_ENV
  SECRET_KEY_BASE: $SECRET_KEY_BASE
  STORAGE_BUCKET: $STORAGE_BUCKET
  STORAGE_ACCESS_KEY: $STORAGE_ACCESS_KEY
  STORAGE_ACCESS_SECRET: $STORAGE_ACCESS_SECRET
  STORAGE_HOST: $STORAGE_HOST

#before_script:
  #- cp $ENV_FILE .env

build-publish:
  stage: build
  image: docker
  services:
    - docker:dind
  environment:
    name: $CI_COMMIT_REF_NAME
  tags:
    - docker
  only:
    - master
    - develop
  script:
    ## DOCKER_BUILDKIT=1 COMPOSE_DOCKER_CLI_BUILD=1 
    ##- docker compose --project-directory . -f docker/docker-compose.yml --env-file .env build
    - docker build -f docker/Dockerfile
      --build-arg CI_PROJECT_ENV=$CI_PROJECT_ENV
      --build-arg CI_VERSION_ENV=$CI_VERSION_ENV
      --build-arg CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA
      --build-arg RAILS_ENV=$RAILS_ENV
      --build-arg SECRET_KEY_BASE=$SECRET_KEY_BASE
      --tag $CI_PROJECT_ENV:$CI_VERSION_ENV .
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker tag $CI_PROJECT_ENV:$CI_VERSION_ENV $CI_REGISTRY_IMAGE/$CI_PROJECT_ENV:$CI_VERSION_ENV
    - docker push $CI_REGISTRY_IMAGE/$CI_PROJECT_ENV:$CI_VERSION_ENV
  when: manual

build-gitlab:
  stage: build
  image: ruby:2.7.5
  environment:
    name: $CI_COMMIT_REF_NAME
  tags:
    - docker
  only:
    - master
    - develop
  script:
    - gem install bundler
    - bundle config set --local path 'vendor/bundle'
    - bundle install --jobs 4 --retry 3
  artifacts:
    paths:
      - vendor/bundle/
  when: manual

build-gitlab-docker:
  stage: build
  image: docker
  services:
    - docker:dind
  environment:
    name: $CI_COMMIT_REF_NAME
  tags:
    - docker
  only:
    - master
    - develop
  script:
    - DOCKER_BUILDKIT=1 docker build -f docker/Dockerfile-gitlab
      --build-arg CI_PROJECT_ENV=$CI_PROJECT_ENV
      --build-arg CI_VERSION_ENV=$CI_VERSION_ENV
      --build-arg CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA
      --build-arg RAILS_ENV=$RAILS_ENV
      --build-arg SECRET_KEY_BASE=$SECRET_KEY_BASE
      --tag $CI_PROJECT_ENV:$CI_VERSION_ENV .
  when: manual
  dependencies:
    - build-gitlab

publish-with-precompile:
  stage: precompile
  image: docker
  services:
    - docker:dind
  environment:
    name: $CI_COMMIT_REF_NAME
  tags:
    - docker
  only:
    - master
    - develop
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build -f docker/Dockerfile-precompile
      --build-arg CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE
      --build-arg CI_PROJECT_ENV=$CI_PROJECT_ENV
      --build-arg CI_VERSION_ENV=$CI_VERSION_ENV
      --build-arg CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA
      --build-arg RAILS_ENV=$RAILS_ENV
      --build-arg SECRET_KEY_BASE=$SECRET_KEY_BASE
      --build-arg STORAGE_BUCKET=$STORAGE_BUCKET
      --build-arg STORAGE_ACCESS_KEY=$STORAGE_ACCESS_KEY
      --build-arg STORAGE_ACCESS_SECRET=$STORAGE_ACCESS_SECRET
      --build-arg STORAGE_HOST=$STORAGE_HOST
      --tag $CI_PROJECT_ENV:$CI_VERSION_ENV .
    - docker tag $CI_PROJECT_ENV:$CI_VERSION_ENV $CI_REGISTRY_IMAGE/$CI_PROJECT_ENV:$CI_VERSION_ENV
    - docker push $CI_REGISTRY_IMAGE/$CI_PROJECT_ENV:$CI_VERSION_ENV
  when: manual

precompile-gitlab:
  stage: precompile
  image: ruby:2.7.5
  environment:
    name: $CI_COMMIT_REF_NAME
  tags:
    - docker
  only:
    - master
    - develop
  script:
    - apt-get clean && apt-get update #&& apt-get upgrade -y
    - apt-get install -y nodejs
    - gem install bundler
    - bundle install --jobs 4 --retry 3
    - mkdir log
    # Move file to not acess db
    - mv config/initializers/email.rb config/
    # Assets precompile
    - bundle exec rake assets:precompile --trace
    - bundle exec rake assets:clean
    ## Cleanup
    #- cp public/assets/.sprockets-manifest-*.json .
    #- bundle exec rake assets:clobber
    #- mkdir public/assets
    #- cp .sprockets-manifest-*.json public/assets/
    ## Init before system up
    - mv config/email.rb config/initializers/
  artifacts:
    paths:
      - public/assets/.sprockets-manifest-*.json
  when: manual

redeploy-rancher:
  stage: deploy
  image: docker
  environment:
    name: $CI_COMMIT_REF_NAME
  tags:
    - ssh
  only:
    - master
    - develop
  script:
    - 'curl -X POST -H "Content-Type: application/json" --user "${TOKEN_API_RANCHER}" "https://rancher.cercomp.ufg.br/v3/project/c-m-gzh7mr9c:p-bxrnt/workloads/deployment:default:weby-develop?action=redeploy"' 
  when: manual
