stages:
  - build
  - precompile
  - deploy

variables:  # https://docs.gitlab.com/ee/ci/variables/
  DOCKER_TLS_CERTDIR: ""
  CI_PROJECT_ENV: ${CI_PROJECT_NAME}_${CI_COMMIT_BRANCH}
  CI_VERSION_ENV: "latest"

before_script:
  #- echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  #- docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
  - cp $ENV_FILE .env

base:
  stage: build
  image: docker
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  services:
    - docker:dind
  environment:
    name: $CI_COMMIT_BRANCH
  tags:
    - docker
  only:
    - master
    - develop
  script:
    ## - DOCKER_BUILDKIT=1 COMPOSE_DOCKER_CLI_BUILD=1 docker compose --project-directory . -f docker/docker-compose.yml --env-file .env build
    - docker build -f docker/Dockerfile
      --build-arg CI_PROJECT_ENV=$CI_PROJECT_ENV
      --build-arg CI_VERSION_ENV=$CI_VERSION_ENV
      --build-arg CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA
      --build-arg RAILS_ENV=$RAILS_ENV
      --build-arg SECRET_KEY_BASE=$SECRET_KEY_BASE
      --tag $CI_PROJECT_ENV:$CI_VERSION_ENV .
    - docker tag $CI_PROJECT_ENV:$CI_VERSION_ENV $CI_REGISTRY_IMAGE/$CI_PROJECT_ENV:$CI_VERSION_ENV
    - docker push $CI_REGISTRY_IMAGE/$CI_PROJECT_ENV:$CI_VERSION_ENV
  when: manual

precompile:
  stage: precompile
  image: $CI_REGISTRY_IMAGE/$CI_PROJECT_ENV:$CI_VERSION_ENV
  environment:
    name: $CI_COMMIT_BRANCH
  services:
    - docker:dind
  tags:
    - docker
  only:
    - master
    - develop
  script:
    - mkdir log
    ## Assets precompile
    - bundle exec rake assets:precompile --trace
    - bundle exec rake assets:clean
    ## Cleanup
    - cp public/assets/.sprockets-manifest-*.json .
    - bundle exec rake assets:clobber
    - mkdir public/assets
    - cp .sprockets-manifest-*.json public/assets/
  artifacts:
    paths:
      - public/assets/
  when: manual

attach-assets:
  stage: precompile
  image: docker
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  services:
    - docker:dind
  environment:
    name: $CI_COMMIT_BRANCH
  tags:
    - docker
  only:
    - master
    - develop
  script:
    - docker build -f docker/Dockerfile-gitlab
      --build-arg CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE
      --build-arg CI_PROJECT_ENV=$CI_PROJECT_ENV
      --build-arg CI_VERSION_ENV=$CI_VERSION_ENV
      --build-arg CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA
      --tag $CI_PROJECT_ENV:$CI_VERSION_ENV .
    - docker tag $CI_PROJECT_ENV:$CI_VERSION_ENV $CI_REGISTRY_IMAGE/$CI_PROJECT_ENV:$CI_VERSION_ENV
    - docker push $CI_REGISTRY_IMAGE/$CI_PROJECT_ENV:$CI_VERSION_ENV
  needs:
    - job: precompile
      artifacts: true

deploy:
  stage: deploy
  image: docker
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  environment:
    name: $CI_COMMIT_BRANCH
  tags:
    - docker
  only:
    - master
    - develop
  script:
    - docker -H tcp://200.137.218.139:2375 compose -f docker/docker-compose.yml up -d --pull always --force-recreate
  when: manual
